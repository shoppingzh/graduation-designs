C51 COMPILER V9.01   LCD12864                                                              05/05/2018 16:26:02 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LCD12864
OBJECT MODULE PLACED IN ..\Outputs\lcd12864.obj
COMPILER INVOKED BY: D:\Dev\Keil\C51\BIN\C51.EXE ..\Hardware\lcd12864.c BROWSE INCDIR(..\User,..\Hardware) DEBUG OBJECTE
                    -XTEND PRINT(.\lcd12864.lst) OBJECT(..\Outputs\lcd12864.obj)

line level    source

   1          #include "lcd12864.h"
   2          #include "reg51.h"
   3          #define DB P0
   4          
   5          sbit RS = P3^0;
   6          sbit RW = P3^1;
   7          sbit EN = P3^2;
   8          sbit RST = P2^4;
   9          sbit PSB = P2^0;
  10          
  11          /**
  12          * 内部延时程序
  13          */
  14          static void delay(uchar t){
  15   1              uchar i, j;
  16   1              for(i=0;i<t;i++){
  17   2                      for(j=0;j<10;j++);
  18   2              }
  19   1      }
  20          
  21          /**
  22          * LCD12864 等待忙信号
  23          */
  24          static void wait_busy(){
  25   1              uchar t;
  26   1              DB = 0xff;
  27   1              RS = 0;
  28   1              RW = 1;
  29   1              EN = 1;
  30   1              for(t=0;t<10;t++){
  31   2                      if(!(DB & 0x80))
  32   2                              break;
  33   2              }
  34   1              EN = 0;
  35   1      }
  36          
  37          /**
  38          * 获取所在位置的地址
  39          * @param row    行索引，从1开始
  40          * @param col    列索引，从1开始
  41          */
  42          static uchar get_addr(uchar row, uchar col){
  43   1              uchar adr = 0x80;
  44   1              if(row == 1){
  45   2                      adr = 0x80 + col - 1;   
  46   2              }else if(row == 2){
  47   2                      adr = 0x90 + col - 1;
  48   2              }else if(row == 3){
  49   2                      adr = 0x88 + col - 1;
  50   2              }else if(row == 4){
  51   2                      adr = 0x98 + col - 1;
  52   2              }
  53   1              return adr;
  54   1      }
C51 COMPILER V9.01   LCD12864                                                              05/05/2018 16:26:02 PAGE 2   

  55          
  56          /**
  57          * LCD12864 初始化，普通模式
  58          */
  59          void lcd_init(){
  60   1              RST = 0;                                //复位
  61   1              delay(100);
  62   1              RST = 1;
  63   1              PSB = 1;
  64   1              delay(100);
  65   1      
  66   1              lcd_write_com(0x30);    //使用8位MPU接口
  67   1              delay(1);
  68   1              lcd_write_com(0x30);    //使用基本指令集
  69   1              delay(1);
  70   1              lcd_write_com(0x0c);    //打开显示
  71   1              delay(1);
  72   1              lcd_write_com(0x01);    //清屏
  73   1              delay(1);
  74   1              lcd_write_com(0x06);    //设定游标移动模式      
  75   1      }
  76          
  77          /**
  78          * LCD12864 写指令
  79          */
  80          void lcd_write_com(uchar com){
  81   1              RS = 0;
  82   1              RW = 0;
  83   1              EN = 0;
  84   1              delay(1);
  85   1              DB = com;
  86   1              EN = 1;
  87   1              delay(1);
  88   1              EN = 0;
  89   1      }
  90          
  91          /**
  92          * LCD12864 写数据
  93          */
  94          void lcd_write_data(uchar dat){
  95   1              RS = 1;
  96   1              RW = 0;
  97   1              EN = 0;
  98   1              delay(1);
  99   1              DB = dat;
 100   1              EN = 1;
 101   1              delay(1);
 102   1              EN = 0;
 103   1      }
 104          
 105          /**
 106          * LCD12864 读数据（测忙）
 107          */
 108          uchar lcd_read_data(){
 109   1              uchar dat;
 110   1              wait_busy();
 111   1              RS = 1;
 112   1              RW = 1;
 113   1              EN = 0;
 114   1              delay(1);
 115   1              EN = 1;
 116   1              delay(1);
C51 COMPILER V9.01   LCD12864                                                              05/05/2018 16:26:02 PAGE 3   

 117   1              dat = DB;
 118   1              EN = 0;
 119   1              delay(1);
 120   1              return dat;
 121   1      }
 122          
 123          /**
 124          * LCD12864 在屏幕上绘制点
 125          */
 126          void lcd_draw_point(uchar x, uchar y){
 127   1              uint bt, dat;
 128   1              uchar x_adr, y_adr, high, low;          //X、Y地址，写入的高低字节
 129   1              lcd_write_com(0x34);
 130   1              lcd_write_com(0x34);
 131   1      
 132   1              //确定显示位置
 133   1              y_adr = 0x80 + y % 32;
 134   1              if(y > 31)
 135   1                      x_adr = 0x88 + x / 16;
 136   1              else
 137   1                      x_adr = 0x80 + x / 16;
 138   1      
 139   1              //读取以前点的信息
 140   1              bt = 0x8000 >> (x % 16);
 141   1              lcd_write_com(y_adr);   //写入读取位置，读取这个点的数据
 142   1              lcd_write_com(x_adr);
 143   1              lcd_read_data();                //舍弃第一个字节
 144   1              dat = lcd_read_data();
 145   1              dat <<= 8;
 146   1              dat |= lcd_read_data();
 147   1              bt |= dat;                              //将要显示的点或上以前的点
 148   1              high = bt >> 8;
 149   1              low = bt;
 150   1      
 151   1              //写入新的信息
 152   1              lcd_write_com(y_adr);   
 153   1              lcd_write_com(x_adr);
 154   1              lcd_write_data(high);
 155   1              lcd_write_data(low);
 156   1      
 157   1              lcd_write_com(0x36);
 158   1              lcd_write_com(0x30);
 159   1      }
 160          
 161          /**
 162          * LCD12864 清除画图内容
 163          */
 164          void lcd_graphics_clear(){
 165   1              uchar i, j;
 166   1              lcd_write_com(0x34);
 167   1              lcd_write_com(0x34);
 168   1      
 169   1              for(i=0;i<32;i++){
 170   2                      lcd_write_com(0x80 + i);
 171   2                      lcd_write_com(0x80);
 172   2                      for(j=0;j<32;j++){
 173   3                              lcd_write_data(0x00);
 174   3                      }
 175   2              }
 176   1      
 177   1              lcd_write_com(0x36);
 178   1              lcd_write_com(0x30);
C51 COMPILER V9.01   LCD12864                                                              05/05/2018 16:26:02 PAGE 4   

 179   1      }
 180          
 181          /**
 182          * LCD12864 在指定位置书写ASCII码
 183          * @param row    显示行
 184          * @param col    显示列
 185          * @param left   左ASCII码字符
 186          * @param right  右ASCII码字符
 187          */
 188          void lcd_display_ascii(uchar row, uchar col, char left, char right){
 189   1              lcd_write_com(0x30);            
 190   1              lcd_write_com(get_addr(row, col));
 191   1      
 192   1              lcd_write_data(left == 0 ? ' ' : left);
 193   1              lcd_write_data(right == 0 ? ' ' : right);
 194   1      }
 195          
 196          /**
 197          * LCD12864 在指定的位置书写中文
 198          * @param row    中文字符串的显示行，该值不能大于4
 199          * @param col    中文字符串的显示列，该值不能大于8
 200          * @param str    中文字符串
 201          */
 202          void lcd_display_string(uchar row, uchar col, char* str){
 203   1              uchar adr;
 204   1              if(row < 1 || col < 1 || row > 4 || col > 8)
 205   1                      return;
 206   1              adr = get_addr(row, col);
 207   1      
 208   1              lcd_write_com(adr);
 209   1              while(*str){
 210   2                      lcd_write_data(*str);
 211   2                      str++;
 212   2              }
 213   1      }
 214          
 215          /**
 216          * 显示数字，最多显示5位
 217          */
 218          void lcd_display_digit(uchar row, uchar col, uint d){
 219   1              uchar addr = get_addr(row, col);
 220   1              lcd_write_com(0x30);
 221   1              lcd_write_com(addr);                                            
 222   1              if(d <= 9){
 223   2                      lcd_write_data(' ');
 224   2                      lcd_write_data(d + 48);
 225   2              }else if(d <= 99){
 226   2                      lcd_write_data(d / 10 + 48);
 227   2                      lcd_write_data(d % 10 + 48);
 228   2              }else if(d <= 999){
 229   2                      lcd_write_data(' ');
 230   2                      lcd_write_data(d / 100 + 48);
 231   2                      lcd_write_com(addr + 1);
 232   2                      lcd_write_data(d / 10 % 10 + 48);
 233   2                      lcd_write_data(d % 10 + 48);
 234   2              }else if(d <= 9999){
 235   2                      lcd_write_data(d / 1000 + 48);
 236   2                      lcd_write_data(d / 100 % 10 + 48);
 237   2                      lcd_write_com(addr + 1);
 238   2                      lcd_write_data(d / 10 % 10 + 48);
 239   2                      lcd_write_data(d % 10 + 48);
 240   2              }else if(d <= 99999){
C51 COMPILER V9.01   LCD12864                                                              05/05/2018 16:26:02 PAGE 5   

 241   2                      lcd_write_data(' ');
 242   2                      lcd_write_data(d / 10000 + 48);
 243   2                      lcd_write_com(addr + 1);
 244   2                      lcd_write_data(d / 1000 % 10 + 48);
 245   2                      lcd_write_data(d / 100 % 10 + 48);
 246   2                      lcd_write_com(addr + 2);
 247   2                      lcd_write_data(d / 10 % 10 + 48);
 248   2                      lcd_write_data(d % 10 + 48);
 249   2              }
 250   1      }
 251          
 252          /**
 253          * 清屏
 254          */
 255          void lcd_clear(){
 256   1              lcd_write_com(0x01);
 257   1              delay(50);
 258   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    794    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
